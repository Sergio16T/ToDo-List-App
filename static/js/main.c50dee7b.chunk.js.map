{"version":3,"sources":["button.js","App.js","serviceWorker.js","index.js"],"names":["Button","state","isToggled","setToggle","bind","this","setState","div","key","props","index","className","onClick","style","borderRadius","width","height","padding","margin","display","alignItems","justifyContent","color","cursor","animate","variants","active","opacity","background","x","scale","inactive","React","Component","TodoList","items","map","item","id","text","App","Date","now","handleChange","handleSubmit","onSubmit","htmlFor","onChange","value","button","outline","border","cursour","whileHover","whileTap","y","e","target","preventDefault","length","newItem","concat","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uTAiEeA,E,YA7DX,aAAe,IAAD,8BACV,+CACKC,MAAQ,CACTC,WAAW,GAEf,EAAKC,UAAY,EAAKA,UAAUC,KAAf,gBALP,E,yEAQDC,KAAKJ,MAAMC,UAKZG,KAAKC,SAAS,CACVJ,WAAW,IALnBG,KAAKC,SAAS,CACVJ,WAAW,M,+BASb,IAAD,OA2BL,OACI,kBAAC,IAAOK,IAAR,CACAC,IAAOH,KAAKI,MAAMC,MAClBC,UAAU,eACVC,QAAS,kBAAM,EAAKT,aACpBU,MA/BQ,CACZC,aAAc,GACdC,MAAO,GACPC,OAAQ,GACRC,QAAS,GACTC,OAAO,OACPC,QAAS,OACTC,WAAY,SACZC,eAAgB,SAChBC,MAAO,QACPC,OAAQ,WAsBJC,QAAUnB,KAAKJ,MAAMC,UAAY,SAAW,WAC5CuB,SArBa,CACjBC,OAAQ,CACJC,QAAS,EACTC,WAAY,UACZC,EAAG,QACHC,MAAO,MAEXC,SAAU,CACNJ,QAAS,EACTC,WAAY,UACZC,EAAG,OACHC,MAAO,KAYP,0BAAMjB,MAAQ,CAACS,MAAOjB,KAAKJ,MAAMC,UAAY,OAAS,UAAWG,KAAKJ,MAAMC,UAAW,WAAa,qB,GAxD3F8B,IAAMC,W,MCuE3B,SAASC,EAASzB,GACd,OACE,4BACGA,EAAM0B,MAAMC,KAAI,SAACC,EAAM3B,GAAP,OACf,yBAAKF,IAAG,UAAOE,EAAP,KAAiBC,UAAW,iBACpC,wBAAIA,UAAW,YAAYH,IAAK6B,EAAKC,IAAKD,EAAKE,MAC/C,kBAAC,EAAD,CAAQ7B,MAAQA,SAQX8B,M,YAlFb,WAAY/B,GAAQ,IAAD,8BACjB,4CAAMA,KACDR,MAAQ,CAAEkC,MAAO,CAAC,CAACI,KAAM,yCAA0CD,GAAIG,KAAKC,OAAQ,CAACH,KAAM,4BAA6BD,GAAIG,KAAKC,QAASH,KAAM,IACrJ,EAAKI,aAAe,EAAKA,aAAavC,KAAlB,gBACpB,EAAKwC,aAAe,EAAKA,aAAaxC,KAAlB,gBAJH,E,sEAmBjB,OACE,6BACE,0CACA,yBAAKO,UAAU,iBACf,0BAAMkC,SAAUxC,KAAKuC,cACnB,2BAAON,GAAI,aAAaQ,QAAQ,YAAhC,0BAGA,2BACER,GAAG,WACHS,SAAU1C,KAAKsC,aACfK,MAAO3C,KAAKJ,MAAMsC,OAEpB,kBAAC,IAAOU,OAAR,CACApC,MAzBS,CACbe,WAAY,UACZd,aAAc,GACdC,MAAO,IACPE,QAAS,YACTC,OAAQ,WACRI,MAAO,OACP4B,QAAS,OACTC,OAAQ,OACRC,QAAS,WAiBLC,WAAa,CAACvB,MAAO,KACrBwB,SAAW,CAACxB,MAAO,GAAKD,EAAG,OAAQ0B,EAAG,QAEpC,uBAAG5C,UAAU,kBAGjB,kBAACuB,EAAD,CAAUC,MAAO9B,KAAKJ,MAAMkC,Y,mCAMrBqB,GACXnD,KAAKC,SAAS,CAAEiC,KAAMiB,EAAEC,OAAOT,U,mCAGpBQ,GAEX,GADAA,EAAEE,iBACGrD,KAAKJ,MAAMsC,KAAKoB,OAArB,CAIA,IAAMC,EAAU,CACdrB,KAAMlC,KAAKJ,MAAMsC,KACjBD,GAAIG,KAAKC,OAGXrC,KAAKC,UAAS,SAAAL,GAAK,MAAK,CACtBkC,MAAOlC,EAAMkC,MAAM0B,OAAOD,GAC1BrB,KAAM,Y,GAhEMP,IAAMC,WCOJ6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.c50dee7b.chunk.js","sourcesContent":["import React  from 'react';\nimport { motion } from 'framer-motion'; \n\nclass Button extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            isToggled: false\n        }\n        this.setToggle = this.setToggle.bind(this); \n    }\n    setToggle() {\n            if (!this.state.isToggled) {\n            this.setState({\n                isToggled: true\n                }); \n            } else {\n                this.setState({\n                    isToggled: false\n                }); \n            }   \n    }\n\n    render() {\n    const styles1 = {\n        borderRadius: 30,\n        width: 65,\n        height: 65,\n        padding: 10,\n        margin:\"auto\",\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        color: \"white\", \n        cursor: \"pointer\"\n        }; \n        const variants = {\n        active: {\n            opacity: 1, \n            background: \"#7fffd4\",\n            x: \"-10px\",\n            scale: 1.25,\n        },\n        inactive: {\n            opacity: 1,\n            background: \"#f95c5c\",\n            x: \"30px\",\n            scale: 1,\n        }\n        };\n        return (\n            <motion.div\n            key = {this.props.index}\n            className=\"toggleButton\"\n            onClick={() => this.setToggle()}\n            style ={styles1}\n            animate ={this.state.isToggled ? \"active\" : \"inactive\"}\n            variants ={variants}\n          >\n            <span style ={{color: this.state.isToggled ? \"#333\" : \"white\"}}>{this.state.isToggled? \"Complete\" : \"Not Complete\"}</span>\n          </motion.div>\n        )\n    }\n}\n\nexport default Button; ","import React from 'react';\nimport { motion } from 'framer-motion'; \nimport Button from './button'\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { items: [{text: 'Schedule meeting with senior developer', id: Date.now()}, {text: 'Become a Javascript Ninja', id: Date.now()}], text: '' };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  render() {\n    const styles = {\n      background: \"#7fffd4\",\n      borderRadius: 30,\n      width: 100, \n      padding: \"10px 20px\",\n      margin: \"0px 10px\",\n      color: \"#333\",\n      outline: \"none\",\n      border: \"none\",\n      cursour: \"pointer\"\n    };\n    return (\n      <div>\n        <h3>To Do List</h3>\n        <div className='listContainer'>\n        <form onSubmit={this.handleSubmit}>\n          <label id= \"inputLabel\" htmlFor=\"new-todo\">\n            What needs to be done?\n          </label>\n          <input\n            id=\"new-todo\"\n            onChange={this.handleChange}\n            value={this.state.text}\n          />\n          <motion.button \n          style ={styles}\n          whileHover ={{scale: 1.1}}\n          whileTap ={{scale: 0.9, x: \"-5px\", y: \"5px\"}}\n          >\n            <i className=\"fas fa-plus\"></i>\n          </motion.button>\n        </form>\n        <TodoList items={this.state.items} />\n        </div>\n      </div>\n    );\n  }\n  //Sets state of text to input value on change \n  handleChange(e) {\n    this.setState({ text: e.target.value });\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    if (!this.state.text.length) {\n      //prevent's empty text from being added to TO DO\n      return;\n    }\n    const newItem = {\n      text: this.state.text, // grabs text from state set by handleChange(e)\n      id: Date.now()\n    };\n\n    this.setState(state => ({\n      items: state.items.concat(newItem), // taking value of state.items and using concat which returns a new array of merged (existing array containing object(s) with addition of new object)\n      text: '' // resets to empty string ready for next input to use handleChange(e)\n    }));\n  }\n}\n\nfunction TodoList(props) {\n    return (\n      <ul>\n        {props.items.map((item, index) => (\n          <div key = {`${index}a`} className ='itemContainer'>\n          <li className ='listItems' key={item.id}>{item.text}</li>\n          <Button index ={index}></Button>\n          </div>\n        ))}\n      </ul>\n    );\n  \n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}